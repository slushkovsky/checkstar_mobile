package com.dinamic.ivan.receipts;import android.content.BroadcastReceiver;import android.content.IntentFilter;import android.graphics.Bitmap;import android.graphics.Color;import android.os.Bundle;import android.provider.Settings;import android.support.v4.content.LocalBroadcastManager;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.util.Log;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.content.Intent;import android.provider.MediaStore;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.util.ArrayList;import java.util.List;import java.util.Arrays;import java.util.UUID;import android.os.Environment;import android.support.v4.content.ContextCompat;import android.Manifest;import android.content.pm.PackageManager;import android.support.v4.app.ActivityCompat;import com.dinamic.ivan.entities.Expense;import com.dinamic.ivan.entities.Receipt;import com.dinamic.ivan.entities.Sale;import com.dinamic.ivan.receipts.gcm.QuickstartPreferences;import com.dinamic.ivan.ReceiptSDK;import com.koushikdutta.async.future.FutureCallback;public class MainActivity extends AppCompatActivity {    List<String> REQUIRED_PERMISSIONS = Arrays.asList(        Manifest.permission.CAMERA,        Manifest.permission.READ_SMS,        Manifest.permission.ACCESS_FINE_LOCATION,        Manifest.permission.WRITE_EXTERNAL_STORAGE//        Manifest.permission    );    public static String EXTRA_RECEIPT = "EXTRA_RECEIPT";    ReceiptSDK sdk;    private static final int PLAY_SERVICES_RESOLUTION_REQUEST = 9000;    private static final int PERMISSION_GRANTED_SUCCESSFULY = 1;    private BroadcastReceiver mRegistrationBroadcastReceiver;    private boolean isReceiverRegistered;    private boolean permissionsProcessFinished = false;    protected void requestPermissions() {        List<String> toRequest = new ArrayList<>();        for (String permission: REQUIRED_PERMISSIONS)            if (ContextCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED)                toRequest.add(permission);        if (toRequest.size() != 0)            ActivityCompat.requestPermissions(this, toRequest.toArray(new String[toRequest.size()]), PERMISSION_GRANTED_SUCCESSFULY);        else            onPermissionsGettedSuccessfuly();    }    private void initSDK() {        FutureCallback<List<Expense>> onExpeses = new FutureCallback<List<Expense>>() {            @Override            public void onCompleted(Exception e, List<Expense> expenses) {                System.out.print("Expense");            }        };        FutureCallback<List<Sale>> onSales = new FutureCallback<List<Sale>>() {            @Override            public void onCompleted(Exception e, List<Sale> sales) {                System.out.println("Sale");            }        };        FutureCallback<Receipt> onReceiptRecognized = new FutureCallback<Receipt>() {            @Override            public void onCompleted(Exception e, Receipt receipt) {                System.out.print("Receipt");                /*                Intent intent = new Intent(getApplicationContext(), ReceiptDataActivity.class);                intent.putExtra(EXTRA_RECEIPT, receipt);                startActivity(intent);                */            }        };        sdk = new ReceiptSDK.Builder()            .setUserId(UUID.randomUUID().toString())            .onExpenses(onExpeses)            .onSales(onSales)            .onReceiptRecognized(onReceiptRecognized)            .build(this);    }    public void onPermissionsGettedSuccessfuly() {        initSDK();        this.permissionsProcessFinished = true;    }    @Override    public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {        onPermissionsGettedSuccessfuly();    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        toolbar.setTitleTextColor(Color.WHITE);        requestPermissions();        findViewById(R.id.fab).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                sdk.captureReceipt();            }        });        // For GMS//        mRegistrationBroadcastReceiver = new BroadcastReceiver() {//            @Override//            public void onReceive(Context context, Intent intent) {//            SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);////            boolean sentToken = sharedPreferences.getBoolean(QuickstartPreferences.SENT_TOKEN_TO_SERVER, false);////            if (sentToken) {//                Log.e(TAG, getString(R.string.gcm_send_message));//            } else {//                Log.e(TAG, getString(R.string.token_error_message));//            }//            }//        };        // Registering BroadcastReceiver//        registerReceiver();////        if (checkPlayServices()) {//            // Start IntentService to register this application with GCM.//            Intent intent = new Intent(this, RegistrationIntentService.class);//            startService(intent);//        }////        try {//            InstanceID instanceID = InstanceID.getInstance(getApplicationContext());//            String token = null;//            token = instanceID.getToken(String.valueOf(R.string.gcm_defaultSenderId), GoogleCloudMessaging.INSTANCE_ID_SCOPE, null);//            sdk.sendGSMid(token);//        } catch (IOException e) {//            e.printStackTrace();//        }    }    @Override    protected void onActivityResult(int requestCode, int resultCode, final Intent intent) {        sdk.onActivityResuilt(requestCode, resultCode, intent);    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.menu_main, menu);//Menu Resource, Menu        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case R.id.action_settings:                Intent intent = new Intent(                        "android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS");                startActivity(intent);                return true;            default:                return super.onOptionsItemSelected(item);        }    }    @Override    protected void onResume() {        super.onResume();        registerReceiver();    }    @Override    protected void onPause() {        LocalBroadcastManager.getInstance(this).unregisterReceiver(mRegistrationBroadcastReceiver);        isReceiverRegistered = false;        super.onPause();    }    private void registerReceiver() {        if(!isReceiverRegistered) {            LocalBroadcastManager.getInstance(this).registerReceiver(mRegistrationBroadcastReceiver,                    new IntentFilter(QuickstartPreferences.REGISTRATION_COMPLETE));            isReceiverRegistered = true;        }    }    /**     * Check the device to make sure it has the Google Play Services APK. If     * it doesn't, display a dialog that allows users to download the APK from     * the Google Play Store or enable it in the device's system settings.     *///    private boolean checkPlayServices() {//        GoogleApiAvailability apiAvailability = GoogleApiAvailability.getInstance();//        int resultCode = apiAvailability.isGooglePlayServicesAvailable(this);//        if (resultCode != ConnectionResult.SUCCESS) {//            if (apiAvailability.isUserResolvableError(resultCode)) {//                apiAvailability.getErrorDialog(this, resultCode, PLAY_SERVICES_RESOLUTION_REQUEST)//                        .show();//            } else {//                Log.i(TAG, "This device is not supported.");//                finish();//            }//            return false;//        }//        return true;//    }}